#pragma kernel Integrate // use force of each particle to move particle
#pragma kernel ComputeForces 
#pragma kernel ComputeDensityPressure

 struct Particle
{
     float pressure;
     float density;
     float3 currentForce;
     float3 velocity;
     float3 position;
};

RWStructuredBuffer<Particle> _particles;

float particleMass;
float viscosity;
float gasConstant;
float restDensity;
float boundDamping;
float radius;
float radius2;
float radius3;
float radius4;
float radius5;
float pi;
int particleLength;
float timeStep;
float3 boxSize;

[numthreads(100, 1, 1)]
void Integrate(uint3 id: SV_DISPATCHTHREADID)
{
    _particles[id.x].currentForce = float3(0, -9.81 * particleMass, 0);
    
    float3 vel = _particles[id.x].velocity + ((_particles[id.x].currentForce / particleMass) * timeStep);
    _particles[id.x].position += vel * timeStep;
    
    //Keep particles in bounds
    
    float3 topRight = boxSize / 2;
    float3 bottomLeft = -boxSize / 2;
    
    if (_particles[id.x].position.x - radius < bottomLeft.x)
    {
        vel.x *= boundDamping;
        _particles[id.x].position.x = bottomLeft.x + radius;
    }
    if (_particles[id.x].position.y - radius < bottomLeft.y)
    {
        vel.y *= boundDamping;
        _particles[id.x].position.y = bottomLeft.y + radius;
    }
    if (_particles[id.x].position.z - radius < bottomLeft.z)
    {
        vel.z *= boundDamping;
        _particles[id.x].position.z = bottomLeft.z + radius;
    }
    
    if (_particles[id.x].position.x + radius < topRight.x)
    {
        vel.x *= boundDamping;
        _particles[id.x].position.x = topRight.x + radius;
    }
    if (_particles[id.x].position.y + radius < topRight.y)
    {
        vel.y *= boundDamping;
        _particles[id.x].position.y = topRight.y + radius;
    }
    if (_particles[id.x].position.z + radius < topRight.z)
    {
        vel.z *= boundDamping;
        _particles[id.x].position.z = topRight.z + radius;
    }
    
    _particles[id.x].velocity = vel;
}

float StdKernel(float distanceSquared)
{
    float x = 1.0f - distanceSquared / radius2;
    return 315.f / (64.f * pi * radius3) * x * x * x;
}

[numthreads(100, 1, 1)]
void ComputeDensityPressure(uint3 id : SV_DISPATCHTHREADID)
{
    float3 origin = _particles[id.x].position;
    float sum = 0;
    
    for (int i = 0; i < particleLength; i++)
    {
        float3 diff = origin - _particles[i].position;
        float distanceSquared = dot(diff, diff);
        
        if(radius2 * 0.004 > distanceSquared * 0.004)
        {
            sum += StdKernel(distanceSquared * 0.004);
        }
    }
    
    _particles[id.x].density = sum * particleMass + 0.000001f;
    _particles[id.x].pressure = gasConstant * (_particles[id.x].density - restDensity);

}

//Smoothing functions
float SpikyKernelFirstDerivative(float distance)
{
    float x = 1.0f - distance / radius;
    return -45.f / (pi * radius4) * x * x;
}

float SpikyKernelSecondDerivative(float distance)
{
    float x = 1.0f - distance / radius;
    return 90.f / (pi * radius5) * x;
}

float3 SpikyKernelGradient(float distance, float3 direction)
{
    return SpikyKernelFirstDerivative(distance) * direction;
}


[numthreads(100, 1, 1)]
void ComputeForces(uint3 id : SV_DISPATCHTHREADID)
{
    //navier stokes equation
    
    float3 origin = _particles[id.x].position;
    float3 density2 = _particles[id.x].density * _particles[id.x].density;
    float mass2 = particleMass * particleMass;
    float3 pressure = float3(0, 0, 0); //to be calculated
    float3 visc = float3(0, 0, 0);
    
    for (int i = 0; i < particleLength; i++)
    {
        if(origin.x == _particles[i].position.x && origin.y == _particles[i].position.y && origin.z == _particles[i].position.z)
        {
            continue;
        }
        
        float dist = distance(_particles[i].position, origin);
        if(dist < radius * 2)
        {
            float3 pressureGradientDirection = normalize(_particles[id.x].position - _particles[i].position);
            
            
            float3 _pressureContribution = mass2 * SpikyKernelGradient(dist, pressureGradientDirection);
            _pressureContribution *= (_particles[id.x].pressure / density2 + _particles[i].pressure / (_particles[i].density));
            
            
            float3 _viscosityContribution = viscosity * mass2 * (_particles[i].velocity - _particles[id.x].velocity) / _particles[i].density;
            _viscosityContribution *= SpikyKernelSecondDerivative(dist);
            
            pressure += _pressureContribution;
            visc += _viscosityContribution;
        }
    }
    
    _particles[id.x].currentForce = float3(0, -9.81 * particleMass, 0) - pressure + visc;

}


